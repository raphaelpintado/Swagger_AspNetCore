/*
 * ByteBank Api
 *
 * Administra a movimentação bancária do correntista e controla o acesso através de CPF e senha.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: suporte@bytebankapi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Conta : IEquatable<Conta>
    { 
        /// <summary>
        /// Gets or Sets Agencia
        /// </summary>
        [DataMember(Name="agencia")]
        public int? Agencia { get; set; }

        /// <summary>
        /// Gets or Sets Numero
        /// </summary>
        [DataMember(Name="numero")]
        public long? Numero { get; set; }

        /// <summary>
        /// Gets or Sets Digito
        /// </summary>
        [DataMember(Name="digito")]
        public int? Digito { get; set; }

        /// <summary>
        /// Gets or Sets Saldo
        /// </summary>
        [DataMember(Name="saldo")]
        public double? Saldo { get; set; }

        /// <summary>
        /// Gets or Sets Cliente
        /// </summary>
        [DataMember(Name="cliente")]
        public Cliente Cliente { get; set; }

        /// <summary>
        /// Gets or Sets Transacoes
        /// </summary>
        [DataMember(Name="transacoes")]
        public List<Transacao> Transacoes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Conta {\n");
            sb.Append("  Agencia: ").Append(Agencia).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Digito: ").Append(Digito).Append("\n");
            sb.Append("  Saldo: ").Append(Saldo).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Transacoes: ").Append(Transacoes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Conta)obj);
        }

        /// <summary>
        /// Returns true if Conta instances are equal
        /// </summary>
        /// <param name="other">Instance of Conta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Conta other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Agencia == other.Agencia ||
                    Agencia != null &&
                    Agencia.Equals(other.Agencia)
                ) && 
                (
                    Numero == other.Numero ||
                    Numero != null &&
                    Numero.Equals(other.Numero)
                ) && 
                (
                    Digito == other.Digito ||
                    Digito != null &&
                    Digito.Equals(other.Digito)
                ) && 
                (
                    Saldo == other.Saldo ||
                    Saldo != null &&
                    Saldo.Equals(other.Saldo)
                ) && 
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) && 
                (
                    Transacoes == other.Transacoes ||
                    Transacoes != null &&
                    Transacoes.SequenceEqual(other.Transacoes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Agencia != null)
                    hashCode = hashCode * 59 + Agencia.GetHashCode();
                    if (Numero != null)
                    hashCode = hashCode * 59 + Numero.GetHashCode();
                    if (Digito != null)
                    hashCode = hashCode * 59 + Digito.GetHashCode();
                    if (Saldo != null)
                    hashCode = hashCode * 59 + Saldo.GetHashCode();
                    if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                    if (Transacoes != null)
                    hashCode = hashCode * 59 + Transacoes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Conta left, Conta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Conta left, Conta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
